#!/bin/bash
#
# Setup global variables that I use or use downstream
export EDITOR=vim

if [ ! -d "$HOME/Workspace" ]; then
	mkdir "$HOME/Workspace"
fi
export WORKSPACE="$HOME/Workspace"

[ -d "$WORKSPACE/repos" ] && export REPOS="$WORKSPACE/repos"
[ -d "$WORKSPACE/hotpads" ] && export HP="$WORKSPACE/hotpads"
[ -d "$WORKSPACE/hotpads/transactions/rent-payment" ] && export RP="$WORKSPACE/hotpads/transactions/rent-payment"
[ -d "$HOME/Google Drive (chaverman@zillowgroup.com)" ] && export GDRIVE_ZG="$HOME/Google Drive (chaverman@zillowgroup.com)"
[ -d "$HOME/Library/Android/sdk" ] && export ANDROID_HOME="$HOME/Library/Android/sdk"

# Added by rental platform
CATALINA_OUT_DIR=/var/log/datarouter

SET_JAVA_HOME() {
	local java_home="$(/usr/libexec/java_home)"
	if [ -d "$java_home" ]; then
		export JAVA_HOME="$java_home"
	else
		>&2 echo "JAVA_HOME of $java_home does not exist; several java things will not work." 
	fi
}
SET_JAVA_HOME

if [ -d "$HOME/Workspace/repos" ]; then
    export REPOS="$HOME/Workspace/repos"
    export GUARD_DIR="$REPOS"
fi
LS_CMD_set () {
    # Ensures that our `ls` command is the one that can group directories. If it's not available, an error message is
    # printed. End result is that LS_CMD is set.
    #
    local path=$(type -P gls)
    if [ $? ]; then
        export LS_CMD="$path -G --group-directories-first --color=always"
        return
    fi
    >&2 echo "gls missing; no directory grouping is possible."
    export LS_CMD="/bin/ls -G --color=always"
}
LS_CMD_set

# Useful for creating the remote on new systems.
export DOTFILES_REMOTE="https://github.com/phasetwenty/dotfiles.git"

READ_AWS_KEYS () {
	if ! which -s jq; then
		>&2 echo "jq missing, cannot import AWS keys."
		return
	elif [ ! -f "$HOME/.aws_access_keys" ]; then
		>&2 echo "~/.aws_access_keys missing, cannot import AWS keys."
		return
	fi

	export AWS_PUBLIC_KEY=$(jq -rM .public "$HOME/.aws_access_keys")
	export AWS_PRIVATE_KEY=$(jq -rM .private "$HOME/.aws_access_keys")
}
READ_AWS_KEYS
